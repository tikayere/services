// Code generated by ent, DO NOT EDIT.

package ent

import (
	"carts/ent/cart"
	"carts/ent/cartitem"
	"carts/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CartItemUpdate is the builder for updating CartItem entities.
type CartItemUpdate struct {
	config
	hooks    []Hook
	mutation *CartItemMutation
}

// Where appends a list predicates to the CartItemUpdate builder.
func (ciu *CartItemUpdate) Where(ps ...predicate.CartItem) *CartItemUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetProductID sets the "product_id" field.
func (ciu *CartItemUpdate) SetProductID(u uuid.UUID) *CartItemUpdate {
	ciu.mutation.SetProductID(u)
	return ciu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ciu *CartItemUpdate) SetNillableProductID(u *uuid.UUID) *CartItemUpdate {
	if u != nil {
		ciu.SetProductID(*u)
	}
	return ciu
}

// SetQuantity sets the "quantity" field.
func (ciu *CartItemUpdate) SetQuantity(i int) *CartItemUpdate {
	ciu.mutation.ResetQuantity()
	ciu.mutation.SetQuantity(i)
	return ciu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (ciu *CartItemUpdate) SetNillableQuantity(i *int) *CartItemUpdate {
	if i != nil {
		ciu.SetQuantity(*i)
	}
	return ciu
}

// AddQuantity adds i to the "quantity" field.
func (ciu *CartItemUpdate) AddQuantity(i int) *CartItemUpdate {
	ciu.mutation.AddQuantity(i)
	return ciu
}

// SetUpdatedAt sets the "updated_at" field.
func (ciu *CartItemUpdate) SetUpdatedAt(t time.Time) *CartItemUpdate {
	ciu.mutation.SetUpdatedAt(t)
	return ciu
}

// SetCartID sets the "cart" edge to the Cart entity by ID.
func (ciu *CartItemUpdate) SetCartID(id uuid.UUID) *CartItemUpdate {
	ciu.mutation.SetCartID(id)
	return ciu
}

// SetCart sets the "cart" edge to the Cart entity.
func (ciu *CartItemUpdate) SetCart(c *Cart) *CartItemUpdate {
	return ciu.SetCartID(c.ID)
}

// Mutation returns the CartItemMutation object of the builder.
func (ciu *CartItemUpdate) Mutation() *CartItemMutation {
	return ciu.mutation
}

// ClearCart clears the "cart" edge to the Cart entity.
func (ciu *CartItemUpdate) ClearCart() *CartItemUpdate {
	ciu.mutation.ClearCart()
	return ciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CartItemUpdate) Save(ctx context.Context) (int, error) {
	ciu.defaults()
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CartItemUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CartItemUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CartItemUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciu *CartItemUpdate) defaults() {
	if _, ok := ciu.mutation.UpdatedAt(); !ok {
		v := cartitem.UpdateDefaultUpdatedAt()
		ciu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciu *CartItemUpdate) check() error {
	if v, ok := ciu.mutation.Quantity(); ok {
		if err := cartitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "CartItem.quantity": %w`, err)}
		}
	}
	if ciu.mutation.CartCleared() && len(ciu.mutation.CartIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CartItem.cart"`)
	}
	return nil
}

func (ciu *CartItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ciu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cartitem.Table, cartitem.Columns, sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.ProductID(); ok {
		_spec.SetField(cartitem.FieldProductID, field.TypeUUID, value)
	}
	if value, ok := ciu.mutation.Quantity(); ok {
		_spec.SetField(cartitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := ciu.mutation.AddedQuantity(); ok {
		_spec.AddField(cartitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := ciu.mutation.UpdatedAt(); ok {
		_spec.SetField(cartitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciu.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cartitem.CartTable,
			Columns: []string{cartitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cartitem.CartTable,
			Columns: []string{cartitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// CartItemUpdateOne is the builder for updating a single CartItem entity.
type CartItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CartItemMutation
}

// SetProductID sets the "product_id" field.
func (ciuo *CartItemUpdateOne) SetProductID(u uuid.UUID) *CartItemUpdateOne {
	ciuo.mutation.SetProductID(u)
	return ciuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ciuo *CartItemUpdateOne) SetNillableProductID(u *uuid.UUID) *CartItemUpdateOne {
	if u != nil {
		ciuo.SetProductID(*u)
	}
	return ciuo
}

// SetQuantity sets the "quantity" field.
func (ciuo *CartItemUpdateOne) SetQuantity(i int) *CartItemUpdateOne {
	ciuo.mutation.ResetQuantity()
	ciuo.mutation.SetQuantity(i)
	return ciuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (ciuo *CartItemUpdateOne) SetNillableQuantity(i *int) *CartItemUpdateOne {
	if i != nil {
		ciuo.SetQuantity(*i)
	}
	return ciuo
}

// AddQuantity adds i to the "quantity" field.
func (ciuo *CartItemUpdateOne) AddQuantity(i int) *CartItemUpdateOne {
	ciuo.mutation.AddQuantity(i)
	return ciuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ciuo *CartItemUpdateOne) SetUpdatedAt(t time.Time) *CartItemUpdateOne {
	ciuo.mutation.SetUpdatedAt(t)
	return ciuo
}

// SetCartID sets the "cart" edge to the Cart entity by ID.
func (ciuo *CartItemUpdateOne) SetCartID(id uuid.UUID) *CartItemUpdateOne {
	ciuo.mutation.SetCartID(id)
	return ciuo
}

// SetCart sets the "cart" edge to the Cart entity.
func (ciuo *CartItemUpdateOne) SetCart(c *Cart) *CartItemUpdateOne {
	return ciuo.SetCartID(c.ID)
}

// Mutation returns the CartItemMutation object of the builder.
func (ciuo *CartItemUpdateOne) Mutation() *CartItemMutation {
	return ciuo.mutation
}

// ClearCart clears the "cart" edge to the Cart entity.
func (ciuo *CartItemUpdateOne) ClearCart() *CartItemUpdateOne {
	ciuo.mutation.ClearCart()
	return ciuo
}

// Where appends a list predicates to the CartItemUpdate builder.
func (ciuo *CartItemUpdateOne) Where(ps ...predicate.CartItem) *CartItemUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CartItemUpdateOne) Select(field string, fields ...string) *CartItemUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CartItem entity.
func (ciuo *CartItemUpdateOne) Save(ctx context.Context) (*CartItem, error) {
	ciuo.defaults()
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CartItemUpdateOne) SaveX(ctx context.Context) *CartItem {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CartItemUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CartItemUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciuo *CartItemUpdateOne) defaults() {
	if _, ok := ciuo.mutation.UpdatedAt(); !ok {
		v := cartitem.UpdateDefaultUpdatedAt()
		ciuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuo *CartItemUpdateOne) check() error {
	if v, ok := ciuo.mutation.Quantity(); ok {
		if err := cartitem.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "CartItem.quantity": %w`, err)}
		}
	}
	if ciuo.mutation.CartCleared() && len(ciuo.mutation.CartIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CartItem.cart"`)
	}
	return nil
}

func (ciuo *CartItemUpdateOne) sqlSave(ctx context.Context) (_node *CartItem, err error) {
	if err := ciuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cartitem.Table, cartitem.Columns, sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CartItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cartitem.FieldID)
		for _, f := range fields {
			if !cartitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cartitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.ProductID(); ok {
		_spec.SetField(cartitem.FieldProductID, field.TypeUUID, value)
	}
	if value, ok := ciuo.mutation.Quantity(); ok {
		_spec.SetField(cartitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := ciuo.mutation.AddedQuantity(); ok {
		_spec.AddField(cartitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := ciuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cartitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if ciuo.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cartitem.CartTable,
			Columns: []string{cartitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cartitem.CartTable,
			Columns: []string{cartitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CartItem{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}
