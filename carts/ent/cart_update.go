// Code generated by ent, DO NOT EDIT.

package ent

import (
	"carts/ent/cart"
	"carts/ent/cartitem"
	"carts/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CartUpdate is the builder for updating Cart entities.
type CartUpdate struct {
	config
	hooks    []Hook
	mutation *CartMutation
}

// Where appends a list predicates to the CartUpdate builder.
func (cu *CartUpdate) Where(ps ...predicate.Cart) *CartUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CartUpdate) SetUserID(u uuid.UUID) *CartUpdate {
	cu.mutation.SetUserID(u)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CartUpdate) SetNillableUserID(u *uuid.UUID) *CartUpdate {
	if u != nil {
		cu.SetUserID(*u)
	}
	return cu
}

// SetExpiresAt sets the "expires_at" field.
func (cu *CartUpdate) SetExpiresAt(t time.Time) *CartUpdate {
	cu.mutation.SetExpiresAt(t)
	return cu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cu *CartUpdate) SetNillableExpiresAt(t *time.Time) *CartUpdate {
	if t != nil {
		cu.SetExpiresAt(*t)
	}
	return cu
}

// SetLastActivityAt sets the "last_activity_at" field.
func (cu *CartUpdate) SetLastActivityAt(t time.Time) *CartUpdate {
	cu.mutation.SetLastActivityAt(t)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CartUpdate) SetUpdatedAt(t time.Time) *CartUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CartUpdate) SetDeletedAt(t time.Time) *CartUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CartUpdate) SetNillableDeletedAt(t *time.Time) *CartUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CartUpdate) ClearDeletedAt() *CartUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetVersion sets the "version" field.
func (cu *CartUpdate) SetVersion(i int) *CartUpdate {
	cu.mutation.ResetVersion()
	cu.mutation.SetVersion(i)
	return cu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cu *CartUpdate) SetNillableVersion(i *int) *CartUpdate {
	if i != nil {
		cu.SetVersion(*i)
	}
	return cu
}

// AddVersion adds i to the "version" field.
func (cu *CartUpdate) AddVersion(i int) *CartUpdate {
	cu.mutation.AddVersion(i)
	return cu
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (cu *CartUpdate) AddCartItemIDs(ids ...uuid.UUID) *CartUpdate {
	cu.mutation.AddCartItemIDs(ids...)
	return cu
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (cu *CartUpdate) AddCartItems(c ...*CartItem) *CartUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCartItemIDs(ids...)
}

// Mutation returns the CartMutation object of the builder.
func (cu *CartUpdate) Mutation() *CartMutation {
	return cu.mutation
}

// ClearCartItems clears all "cart_items" edges to the CartItem entity.
func (cu *CartUpdate) ClearCartItems() *CartUpdate {
	cu.mutation.ClearCartItems()
	return cu
}

// RemoveCartItemIDs removes the "cart_items" edge to CartItem entities by IDs.
func (cu *CartUpdate) RemoveCartItemIDs(ids ...uuid.UUID) *CartUpdate {
	cu.mutation.RemoveCartItemIDs(ids...)
	return cu
}

// RemoveCartItems removes "cart_items" edges to CartItem entities.
func (cu *CartUpdate) RemoveCartItems(c ...*CartItem) *CartUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCartItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CartUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CartUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CartUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CartUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CartUpdate) defaults() {
	if _, ok := cu.mutation.LastActivityAt(); !ok {
		v := cart.UpdateDefaultLastActivityAt()
		cu.mutation.SetLastActivityAt(v)
	}
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := cart.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cart.Table, cart.Columns, sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UserID(); ok {
		_spec.SetField(cart.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := cu.mutation.ExpiresAt(); ok {
		_spec.SetField(cart.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.LastActivityAt(); ok {
		_spec.SetField(cart.FieldLastActivityAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(cart.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(cart.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(cart.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.SetField(cart.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedVersion(); ok {
		_spec.AddField(cart.FieldVersion, field.TypeInt, value)
	}
	if cu.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.CartItemsTable,
			Columns: []string{cart.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCartItemsIDs(); len(nodes) > 0 && !cu.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.CartItemsTable,
			Columns: []string{cart.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.CartItemsTable,
			Columns: []string{cart.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CartUpdateOne is the builder for updating a single Cart entity.
type CartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CartMutation
}

// SetUserID sets the "user_id" field.
func (cuo *CartUpdateOne) SetUserID(u uuid.UUID) *CartUpdateOne {
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CartUpdateOne) SetNillableUserID(u *uuid.UUID) *CartUpdateOne {
	if u != nil {
		cuo.SetUserID(*u)
	}
	return cuo
}

// SetExpiresAt sets the "expires_at" field.
func (cuo *CartUpdateOne) SetExpiresAt(t time.Time) *CartUpdateOne {
	cuo.mutation.SetExpiresAt(t)
	return cuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cuo *CartUpdateOne) SetNillableExpiresAt(t *time.Time) *CartUpdateOne {
	if t != nil {
		cuo.SetExpiresAt(*t)
	}
	return cuo
}

// SetLastActivityAt sets the "last_activity_at" field.
func (cuo *CartUpdateOne) SetLastActivityAt(t time.Time) *CartUpdateOne {
	cuo.mutation.SetLastActivityAt(t)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CartUpdateOne) SetUpdatedAt(t time.Time) *CartUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CartUpdateOne) SetDeletedAt(t time.Time) *CartUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CartUpdateOne) SetNillableDeletedAt(t *time.Time) *CartUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CartUpdateOne) ClearDeletedAt() *CartUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *CartUpdateOne) SetVersion(i int) *CartUpdateOne {
	cuo.mutation.ResetVersion()
	cuo.mutation.SetVersion(i)
	return cuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cuo *CartUpdateOne) SetNillableVersion(i *int) *CartUpdateOne {
	if i != nil {
		cuo.SetVersion(*i)
	}
	return cuo
}

// AddVersion adds i to the "version" field.
func (cuo *CartUpdateOne) AddVersion(i int) *CartUpdateOne {
	cuo.mutation.AddVersion(i)
	return cuo
}

// AddCartItemIDs adds the "cart_items" edge to the CartItem entity by IDs.
func (cuo *CartUpdateOne) AddCartItemIDs(ids ...uuid.UUID) *CartUpdateOne {
	cuo.mutation.AddCartItemIDs(ids...)
	return cuo
}

// AddCartItems adds the "cart_items" edges to the CartItem entity.
func (cuo *CartUpdateOne) AddCartItems(c ...*CartItem) *CartUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCartItemIDs(ids...)
}

// Mutation returns the CartMutation object of the builder.
func (cuo *CartUpdateOne) Mutation() *CartMutation {
	return cuo.mutation
}

// ClearCartItems clears all "cart_items" edges to the CartItem entity.
func (cuo *CartUpdateOne) ClearCartItems() *CartUpdateOne {
	cuo.mutation.ClearCartItems()
	return cuo
}

// RemoveCartItemIDs removes the "cart_items" edge to CartItem entities by IDs.
func (cuo *CartUpdateOne) RemoveCartItemIDs(ids ...uuid.UUID) *CartUpdateOne {
	cuo.mutation.RemoveCartItemIDs(ids...)
	return cuo
}

// RemoveCartItems removes "cart_items" edges to CartItem entities.
func (cuo *CartUpdateOne) RemoveCartItems(c ...*CartItem) *CartUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCartItemIDs(ids...)
}

// Where appends a list predicates to the CartUpdate builder.
func (cuo *CartUpdateOne) Where(ps ...predicate.Cart) *CartUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CartUpdateOne) Select(field string, fields ...string) *CartUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cart entity.
func (cuo *CartUpdateOne) Save(ctx context.Context) (*Cart, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CartUpdateOne) SaveX(ctx context.Context) *Cart {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CartUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CartUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CartUpdateOne) defaults() {
	if _, ok := cuo.mutation.LastActivityAt(); !ok {
		v := cart.UpdateDefaultLastActivityAt()
		cuo.mutation.SetLastActivityAt(v)
	}
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := cart.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CartUpdateOne) sqlSave(ctx context.Context) (_node *Cart, err error) {
	_spec := sqlgraph.NewUpdateSpec(cart.Table, cart.Columns, sqlgraph.NewFieldSpec(cart.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cart.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cart.FieldID)
		for _, f := range fields {
			if !cart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UserID(); ok {
		_spec.SetField(cart.FieldUserID, field.TypeUUID, value)
	}
	if value, ok := cuo.mutation.ExpiresAt(); ok {
		_spec.SetField(cart.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.LastActivityAt(); ok {
		_spec.SetField(cart.FieldLastActivityAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cart.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(cart.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(cart.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.SetField(cart.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedVersion(); ok {
		_spec.AddField(cart.FieldVersion, field.TypeInt, value)
	}
	if cuo.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.CartItemsTable,
			Columns: []string{cart.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCartItemsIDs(); len(nodes) > 0 && !cuo.mutation.CartItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.CartItemsTable,
			Columns: []string{cart.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CartItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cart.CartItemsTable,
			Columns: []string{cart.CartItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cartitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cart{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
