// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/carts.proto

package carts

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CartService service

type CartService interface {
	// Cart operations
	GetOrCreateCart(ctx context.Context, in *GetOrCreateCartRequest, opts ...client.CallOption) (*GetOrCreateCartResponse, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...client.CallOption) (*GetCartResponse, error)
	AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...client.CallOption) (*AddCartItemResponse, error)
	UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...client.CallOption) (*UpdateCartItemResponse, error)
	RemoveCartItem(ctx context.Context, in *RemoveCartItemRequest, opts ...client.CallOption) (*RemoveCartItemResponse, error)
	ClearCart(ctx context.Context, in *ClearCartRequest, opts ...client.CallOption) (*ClearCartResponse, error)
	SoftDeleteCart(ctx context.Context, in *SoftDeleteCartRequest, opts ...client.CallOption) (*SoftDeleteCartResponse, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) GetOrCreateCart(ctx context.Context, in *GetOrCreateCartRequest, opts ...client.CallOption) (*GetOrCreateCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.GetOrCreateCart", in)
	out := new(GetOrCreateCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) GetCart(ctx context.Context, in *GetCartRequest, opts ...client.CallOption) (*GetCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.GetCart", in)
	out := new(GetCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...client.CallOption) (*AddCartItemResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.AddCartItem", in)
	out := new(AddCartItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, opts ...client.CallOption) (*UpdateCartItemResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.UpdateCartItem", in)
	out := new(UpdateCartItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) RemoveCartItem(ctx context.Context, in *RemoveCartItemRequest, opts ...client.CallOption) (*RemoveCartItemResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.RemoveCartItem", in)
	out := new(RemoveCartItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) ClearCart(ctx context.Context, in *ClearCartRequest, opts ...client.CallOption) (*ClearCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.ClearCart", in)
	out := new(ClearCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) SoftDeleteCart(ctx context.Context, in *SoftDeleteCartRequest, opts ...client.CallOption) (*SoftDeleteCartResponse, error) {
	req := c.c.NewRequest(c.name, "CartService.SoftDeleteCart", in)
	out := new(SoftDeleteCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CartService service

type CartServiceHandler interface {
	// Cart operations
	GetOrCreateCart(context.Context, *GetOrCreateCartRequest, *GetOrCreateCartResponse) error
	GetCart(context.Context, *GetCartRequest, *GetCartResponse) error
	AddCartItem(context.Context, *AddCartItemRequest, *AddCartItemResponse) error
	UpdateCartItem(context.Context, *UpdateCartItemRequest, *UpdateCartItemResponse) error
	RemoveCartItem(context.Context, *RemoveCartItemRequest, *RemoveCartItemResponse) error
	ClearCart(context.Context, *ClearCartRequest, *ClearCartResponse) error
	SoftDeleteCart(context.Context, *SoftDeleteCartRequest, *SoftDeleteCartResponse) error
}

func RegisterCartServiceHandler(s server.Server, hdlr CartServiceHandler, opts ...server.HandlerOption) error {
	type cartService interface {
		GetOrCreateCart(ctx context.Context, in *GetOrCreateCartRequest, out *GetOrCreateCartResponse) error
		GetCart(ctx context.Context, in *GetCartRequest, out *GetCartResponse) error
		AddCartItem(ctx context.Context, in *AddCartItemRequest, out *AddCartItemResponse) error
		UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, out *UpdateCartItemResponse) error
		RemoveCartItem(ctx context.Context, in *RemoveCartItemRequest, out *RemoveCartItemResponse) error
		ClearCart(ctx context.Context, in *ClearCartRequest, out *ClearCartResponse) error
		SoftDeleteCart(ctx context.Context, in *SoftDeleteCartRequest, out *SoftDeleteCartResponse) error
	}
	type CartService struct {
		cartService
	}
	h := &cartServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CartService{h}, opts...))
}

type cartServiceHandler struct {
	CartServiceHandler
}

func (h *cartServiceHandler) GetOrCreateCart(ctx context.Context, in *GetOrCreateCartRequest, out *GetOrCreateCartResponse) error {
	return h.CartServiceHandler.GetOrCreateCart(ctx, in, out)
}

func (h *cartServiceHandler) GetCart(ctx context.Context, in *GetCartRequest, out *GetCartResponse) error {
	return h.CartServiceHandler.GetCart(ctx, in, out)
}

func (h *cartServiceHandler) AddCartItem(ctx context.Context, in *AddCartItemRequest, out *AddCartItemResponse) error {
	return h.CartServiceHandler.AddCartItem(ctx, in, out)
}

func (h *cartServiceHandler) UpdateCartItem(ctx context.Context, in *UpdateCartItemRequest, out *UpdateCartItemResponse) error {
	return h.CartServiceHandler.UpdateCartItem(ctx, in, out)
}

func (h *cartServiceHandler) RemoveCartItem(ctx context.Context, in *RemoveCartItemRequest, out *RemoveCartItemResponse) error {
	return h.CartServiceHandler.RemoveCartItem(ctx, in, out)
}

func (h *cartServiceHandler) ClearCart(ctx context.Context, in *ClearCartRequest, out *ClearCartResponse) error {
	return h.CartServiceHandler.ClearCart(ctx, in, out)
}

func (h *cartServiceHandler) SoftDeleteCart(ctx context.Context, in *SoftDeleteCartRequest, out *SoftDeleteCartResponse) error {
	return h.CartServiceHandler.SoftDeleteCart(ctx, in, out)
}

// Client API for AdminService service

type AdminService interface {
	ListCarts(ctx context.Context, in *ListCartsRequest, opts ...client.CallOption) (*ListCartsResponse, error)
	ForceDeleteCart(ctx context.Context, in *ForceDeleteCartRequest, opts ...client.CallOption) (*ForceDeleteCartResponse, error)
	RestoreCart(ctx context.Context, in *RestoreCartRequest, opts ...client.CallOption) (*RestoreCartResponse, error)
	ExportCarts(ctx context.Context, in *ExportCartsRequest, opts ...client.CallOption) (AdminService_ExportCartsService, error)
}

type adminService struct {
	c    client.Client
	name string
}

func NewAdminService(name string, c client.Client) AdminService {
	return &adminService{
		c:    c,
		name: name,
	}
}

func (c *adminService) ListCarts(ctx context.Context, in *ListCartsRequest, opts ...client.CallOption) (*ListCartsResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.ListCarts", in)
	out := new(ListCartsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) ForceDeleteCart(ctx context.Context, in *ForceDeleteCartRequest, opts ...client.CallOption) (*ForceDeleteCartResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.ForceDeleteCart", in)
	out := new(ForceDeleteCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) RestoreCart(ctx context.Context, in *RestoreCartRequest, opts ...client.CallOption) (*RestoreCartResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.RestoreCart", in)
	out := new(RestoreCartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) ExportCarts(ctx context.Context, in *ExportCartsRequest, opts ...client.CallOption) (AdminService_ExportCartsService, error) {
	req := c.c.NewRequest(c.name, "AdminService.ExportCarts", &ExportCartsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &adminServiceExportCarts{stream}, nil
}

type AdminService_ExportCartsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*Cart, error)
}

type adminServiceExportCarts struct {
	stream client.Stream
}

func (x *adminServiceExportCarts) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *adminServiceExportCarts) Close() error {
	return x.stream.Close()
}

func (x *adminServiceExportCarts) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceExportCarts) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceExportCarts) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceExportCarts) Recv() (*Cart, error) {
	m := new(Cart)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AdminService service

type AdminServiceHandler interface {
	ListCarts(context.Context, *ListCartsRequest, *ListCartsResponse) error
	ForceDeleteCart(context.Context, *ForceDeleteCartRequest, *ForceDeleteCartResponse) error
	RestoreCart(context.Context, *RestoreCartRequest, *RestoreCartResponse) error
	ExportCarts(context.Context, *ExportCartsRequest, AdminService_ExportCartsStream) error
}

func RegisterAdminServiceHandler(s server.Server, hdlr AdminServiceHandler, opts ...server.HandlerOption) error {
	type adminService interface {
		ListCarts(ctx context.Context, in *ListCartsRequest, out *ListCartsResponse) error
		ForceDeleteCart(ctx context.Context, in *ForceDeleteCartRequest, out *ForceDeleteCartResponse) error
		RestoreCart(ctx context.Context, in *RestoreCartRequest, out *RestoreCartResponse) error
		ExportCarts(ctx context.Context, stream server.Stream) error
	}
	type AdminService struct {
		adminService
	}
	h := &adminServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AdminService{h}, opts...))
}

type adminServiceHandler struct {
	AdminServiceHandler
}

func (h *adminServiceHandler) ListCarts(ctx context.Context, in *ListCartsRequest, out *ListCartsResponse) error {
	return h.AdminServiceHandler.ListCarts(ctx, in, out)
}

func (h *adminServiceHandler) ForceDeleteCart(ctx context.Context, in *ForceDeleteCartRequest, out *ForceDeleteCartResponse) error {
	return h.AdminServiceHandler.ForceDeleteCart(ctx, in, out)
}

func (h *adminServiceHandler) RestoreCart(ctx context.Context, in *RestoreCartRequest, out *RestoreCartResponse) error {
	return h.AdminServiceHandler.RestoreCart(ctx, in, out)
}

func (h *adminServiceHandler) ExportCarts(ctx context.Context, stream server.Stream) error {
	m := new(ExportCartsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.AdminServiceHandler.ExportCarts(ctx, m, &adminServiceExportCartsStream{stream})
}

type AdminService_ExportCartsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Cart) error
}

type adminServiceExportCartsStream struct {
	stream server.Stream
}

func (x *adminServiceExportCartsStream) Close() error {
	return x.stream.Close()
}

func (x *adminServiceExportCartsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceExportCartsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceExportCartsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceExportCartsStream) Send(m *Cart) error {
	return x.stream.Send(m)
}
