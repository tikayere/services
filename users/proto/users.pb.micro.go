// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/users.proto

package users

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	// Basic CRUD operations
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...client.CallOption) (*ListUsersResponse, error)
	// Authentication related
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...client.CallOption) (*AuthenticateResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*ChangePasswordResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResetPasswordResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...client.CallOption) (*VerifyEmailResponse, error)
	// Query operations
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...client.CallOption) (*GetUserResponse, error)
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...client.CallOption) (*GetUserResponse, error)
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...client.CallOption) (*SearchUsersResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUser", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUser", in)
	out := new(UpdateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...client.CallOption) (*ListUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ListUsers", in)
	out := new(ListUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...client.CallOption) (*AuthenticateResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Authenticate", in)
	out := new(AuthenticateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*ChangePasswordResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ChangePassword", in)
	out := new(ChangePasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*ResetPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ResetPassword", in)
	out := new(ResetPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...client.CallOption) (*VerifyEmailResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.VerifyEmail", in)
	out := new(VerifyEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserByEmail", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUserByUsername", in)
	out := new(GetUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...client.CallOption) (*SearchUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.SearchUsers", in)
	out := new(SearchUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	// Basic CRUD operations
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	GetUser(context.Context, *GetUserRequest, *GetUserResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *UpdateUserResponse) error
	ListUsers(context.Context, *ListUsersRequest, *ListUsersResponse) error
	// Authentication related
	Authenticate(context.Context, *AuthenticateRequest, *AuthenticateResponse) error
	ChangePassword(context.Context, *ChangePasswordRequest, *ChangePasswordResponse) error
	ResetPassword(context.Context, *ResetPasswordRequest, *ResetPasswordResponse) error
	VerifyEmail(context.Context, *VerifyEmailRequest, *VerifyEmailResponse) error
	// Query operations
	GetUserByEmail(context.Context, *GetUserByEmailRequest, *GetUserResponse) error
	GetUserByUsername(context.Context, *GetUserByUsernameRequest, *GetUserResponse) error
	SearchUsers(context.Context, *SearchUsersRequest, *SearchUsersResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error
		ListUsers(ctx context.Context, in *ListUsersRequest, out *ListUsersResponse) error
		Authenticate(ctx context.Context, in *AuthenticateRequest, out *AuthenticateResponse) error
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *ChangePasswordResponse) error
		ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *ResetPasswordResponse) error
		VerifyEmail(ctx context.Context, in *VerifyEmailRequest, out *VerifyEmailResponse) error
		GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, out *GetUserResponse) error
		GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, out *GetUserResponse) error
		SearchUsers(ctx context.Context, in *SearchUsersRequest, out *SearchUsersResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.UserServiceHandler.CreateUser(ctx, in, out)
}

func (h *userServiceHandler) GetUser(ctx context.Context, in *GetUserRequest, out *GetUserResponse) error {
	return h.UserServiceHandler.GetUser(ctx, in, out)
}

func (h *userServiceHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *UpdateUserResponse) error {
	return h.UserServiceHandler.UpdateUser(ctx, in, out)
}

func (h *userServiceHandler) ListUsers(ctx context.Context, in *ListUsersRequest, out *ListUsersResponse) error {
	return h.UserServiceHandler.ListUsers(ctx, in, out)
}

func (h *userServiceHandler) Authenticate(ctx context.Context, in *AuthenticateRequest, out *AuthenticateResponse) error {
	return h.UserServiceHandler.Authenticate(ctx, in, out)
}

func (h *userServiceHandler) ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *ChangePasswordResponse) error {
	return h.UserServiceHandler.ChangePassword(ctx, in, out)
}

func (h *userServiceHandler) ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *ResetPasswordResponse) error {
	return h.UserServiceHandler.ResetPassword(ctx, in, out)
}

func (h *userServiceHandler) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, out *VerifyEmailResponse) error {
	return h.UserServiceHandler.VerifyEmail(ctx, in, out)
}

func (h *userServiceHandler) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, out *GetUserResponse) error {
	return h.UserServiceHandler.GetUserByEmail(ctx, in, out)
}

func (h *userServiceHandler) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, out *GetUserResponse) error {
	return h.UserServiceHandler.GetUserByUsername(ctx, in, out)
}

func (h *userServiceHandler) SearchUsers(ctx context.Context, in *SearchUsersRequest, out *SearchUsersResponse) error {
	return h.UserServiceHandler.SearchUsers(ctx, in, out)
}

// Client API for AdminService service

type AdminService interface {
	ForceDeleteUser(ctx context.Context, in *ForceDeleteUserRequest, opts ...client.CallOption) (*ForceDeleteUserResponse, error)
	SuspendUser(ctx context.Context, in *SuspendUserRequest, opts ...client.CallOption) (*SuspendUserResponse, error)
	ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...client.CallOption) (*ActivateUserResponse, error)
	// Additional admin operations
	BulkCreateUsers(ctx context.Context, opts ...client.CallOption) (AdminService_BulkCreateUsersService, error)
	ExportUsers(ctx context.Context, in *ListUsersRequest, opts ...client.CallOption) (AdminService_ExportUsersService, error)
}

type adminService struct {
	c    client.Client
	name string
}

func NewAdminService(name string, c client.Client) AdminService {
	return &adminService{
		c:    c,
		name: name,
	}
}

func (c *adminService) ForceDeleteUser(ctx context.Context, in *ForceDeleteUserRequest, opts ...client.CallOption) (*ForceDeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.ForceDeleteUser", in)
	out := new(ForceDeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) SuspendUser(ctx context.Context, in *SuspendUserRequest, opts ...client.CallOption) (*SuspendUserResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.SuspendUser", in)
	out := new(SuspendUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...client.CallOption) (*ActivateUserResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.ActivateUser", in)
	out := new(ActivateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) BulkCreateUsers(ctx context.Context, opts ...client.CallOption) (AdminService_BulkCreateUsersService, error) {
	req := c.c.NewRequest(c.name, "AdminService.BulkCreateUsers", &CreateUserRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &adminServiceBulkCreateUsers{stream}, nil
}

type AdminService_BulkCreateUsersService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*CreateUserRequest) error
}

type adminServiceBulkCreateUsers struct {
	stream client.Stream
}

func (x *adminServiceBulkCreateUsers) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *adminServiceBulkCreateUsers) Close() error {
	return x.stream.Close()
}

func (x *adminServiceBulkCreateUsers) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceBulkCreateUsers) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceBulkCreateUsers) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceBulkCreateUsers) Send(m *CreateUserRequest) error {
	return x.stream.Send(m)
}

func (c *adminService) ExportUsers(ctx context.Context, in *ListUsersRequest, opts ...client.CallOption) (AdminService_ExportUsersService, error) {
	req := c.c.NewRequest(c.name, "AdminService.ExportUsers", &ListUsersRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &adminServiceExportUsers{stream}, nil
}

type AdminService_ExportUsersService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*User, error)
}

type adminServiceExportUsers struct {
	stream client.Stream
}

func (x *adminServiceExportUsers) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *adminServiceExportUsers) Close() error {
	return x.stream.Close()
}

func (x *adminServiceExportUsers) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceExportUsers) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceExportUsers) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceExportUsers) Recv() (*User, error) {
	m := new(User)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AdminService service

type AdminServiceHandler interface {
	ForceDeleteUser(context.Context, *ForceDeleteUserRequest, *ForceDeleteUserResponse) error
	SuspendUser(context.Context, *SuspendUserRequest, *SuspendUserResponse) error
	ActivateUser(context.Context, *ActivateUserRequest, *ActivateUserResponse) error
	// Additional admin operations
	BulkCreateUsers(context.Context, AdminService_BulkCreateUsersStream) error
	ExportUsers(context.Context, *ListUsersRequest, AdminService_ExportUsersStream) error
}

func RegisterAdminServiceHandler(s server.Server, hdlr AdminServiceHandler, opts ...server.HandlerOption) error {
	type adminService interface {
		ForceDeleteUser(ctx context.Context, in *ForceDeleteUserRequest, out *ForceDeleteUserResponse) error
		SuspendUser(ctx context.Context, in *SuspendUserRequest, out *SuspendUserResponse) error
		ActivateUser(ctx context.Context, in *ActivateUserRequest, out *ActivateUserResponse) error
		BulkCreateUsers(ctx context.Context, stream server.Stream) error
		ExportUsers(ctx context.Context, stream server.Stream) error
	}
	type AdminService struct {
		adminService
	}
	h := &adminServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AdminService{h}, opts...))
}

type adminServiceHandler struct {
	AdminServiceHandler
}

func (h *adminServiceHandler) ForceDeleteUser(ctx context.Context, in *ForceDeleteUserRequest, out *ForceDeleteUserResponse) error {
	return h.AdminServiceHandler.ForceDeleteUser(ctx, in, out)
}

func (h *adminServiceHandler) SuspendUser(ctx context.Context, in *SuspendUserRequest, out *SuspendUserResponse) error {
	return h.AdminServiceHandler.SuspendUser(ctx, in, out)
}

func (h *adminServiceHandler) ActivateUser(ctx context.Context, in *ActivateUserRequest, out *ActivateUserResponse) error {
	return h.AdminServiceHandler.ActivateUser(ctx, in, out)
}

func (h *adminServiceHandler) BulkCreateUsers(ctx context.Context, stream server.Stream) error {
	return h.AdminServiceHandler.BulkCreateUsers(ctx, &adminServiceBulkCreateUsersStream{stream})
}

type AdminService_BulkCreateUsersStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*CreateUserRequest, error)
}

type adminServiceBulkCreateUsersStream struct {
	stream server.Stream
}

func (x *adminServiceBulkCreateUsersStream) Close() error {
	return x.stream.Close()
}

func (x *adminServiceBulkCreateUsersStream) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceBulkCreateUsersStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceBulkCreateUsersStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceBulkCreateUsersStream) Recv() (*CreateUserRequest, error) {
	m := new(CreateUserRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *adminServiceHandler) ExportUsers(ctx context.Context, stream server.Stream) error {
	m := new(ListUsersRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.AdminServiceHandler.ExportUsers(ctx, m, &adminServiceExportUsersStream{stream})
}

type AdminService_ExportUsersStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*User) error
}

type adminServiceExportUsersStream struct {
	stream server.Stream
}

func (x *adminServiceExportUsersStream) Close() error {
	return x.stream.Close()
}

func (x *adminServiceExportUsersStream) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceExportUsersStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceExportUsersStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceExportUsersStream) Send(m *User) error {
	return x.stream.Send(m)
}
