syntax = "proto3";

package users;

option go_package = "./proto;users";

// Profile represents a user's detailed profile information
message Profile {
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  int64 date_of_birth = 4; // Unix timestamp
  string address = 5;
  string phone_number = 6;
  int64 created_at = 7; // Unix timestamp
  int64 updated_at = 8; // Unix timestamp
}

// User represents a user in the system
message User {
  string id = 1; // Unique identifier for the user
  string email = 2;
  string username = 3;
  string password_hash = 4; // Should be handled securely (e.g., never send plain password)
  int64 created_at = 5; // Unix timestamp
  int64 updated_at = 6; // Unix timestamp
  bool is_active = 7;
  Profile profile = 8; // Embed the profile message
}

// Request message for creating a user
message CreateUserRequest {
  string email = 1;
  string username = 2;
  string password = 3; // Plain password for creation, will be hashed by service
  // Optional profile data
  string first_name = 4;
  string last_name = 5;
  int64 date_of_birth = 6;
  string address = 7;
  string phone_number = 8;
}

// Response message after creating a user
message CreateUserResponse {
  User user = 1;
}

// Request message for getting a user by ID
message GetUserRequest {
  string id = 1;
}

// Response message for getting a user
message GetUserResponse {
  User user = 1;
}

// Request message for updating a user
message UpdateUserRequest {
  string id = 1;
  string email = 2;
  string username = 3;
  // Optional profile data to update
  string first_name = 4;
  string last_name = 5;
  int64 date_of_birth = 6;
  string address = 7;
  string phone_number = 8;
}

// Response message after updating a user
message UpdateUserResponse {
  User user = 1;
}

// Request message for listing users (can add filters/pagination later)
message ListUsersRequest {
  int32 limit = 1;
  int32 offset = 2;
  string filter = 3; // Optional filter string
}

// Response message for listing users
message ListUsersResponse {
  repeated User users = 1;
  int32 total = 2;
}

// Request message for a forced user deletion (Admin operation)
message ForceDeleteUserRequest {
  string id = 1;
}

// Response message for a forced user deletion
message ForceDeleteUserResponse {
  string id = 1; // ID of the deleted user
  bool success = 2;
}

// Request message to suspend a user (Admin operation)
message SuspendUserRequest {
  string id = 1;
}

// Response message after suspending a user
message SuspendUserResponse {
  User user = 1;
}

// Request message to activate a user (Admin operation)
message ActivateUserRequest {
  string id = 1;
}

// Response message after activating a user
message ActivateUserResponse {
  User user = 1;
}

// Request message for user authentication
message AuthenticateRequest {
  string email_or_username = 1;
  string password = 2;
}

// Response message after authentication
message AuthenticateResponse {
  User user = 1;
  string token = 2; // JWT or session token
}

// Request message for changing password
message ChangePasswordRequest {
  string user_id = 1;
  string old_password = 2;
  string new_password = 3;
}

// Response message after changing password
message ChangePasswordResponse {
  bool success = 1;
}

// Request message for resetting password
message ResetPasswordRequest {
  string email = 1;
}

// Response message after resetting password
message ResetPasswordResponse {
  bool success = 1;
}

// Request message for verifying email
message VerifyEmailRequest {
  string token = 1;
}

// Response message after verifying email
message VerifyEmailResponse {
  bool success = 1;
}

// Request message for searching users
message SearchUsersRequest {
  string query = 1;
  int32 limit = 2;
  int32 offset = 3;
}

// Response message for searching users
message SearchUsersResponse {
  repeated User users = 1;
  int32 total = 2;
}

// Request message for getting user by email
message GetUserByEmailRequest {
  string email = 1;
}

// Request message for getting user by username
message GetUserByUsernameRequest {
  string username = 1;
}

// UserService defines the RPC methods for general user management
service UserService {
  // Basic CRUD operations
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {}
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {}
  
  // Authentication related
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {}
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {}
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {}
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {}
  
  // Query operations
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserResponse) {}
  rpc GetUserByUsername(GetUserByUsernameRequest) returns (GetUserResponse) {}
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {}
}

// AdminService defines the RPC methods for privileged admin operations
service AdminService {
  rpc ForceDeleteUser(ForceDeleteUserRequest) returns (ForceDeleteUserResponse) {}
  rpc SuspendUser(SuspendUserRequest) returns (SuspendUserResponse) {}
  rpc ActivateUser(ActivateUserRequest) returns (ActivateUserResponse) {}
  
  // Additional admin operations
  rpc BulkCreateUsers(stream CreateUserRequest) returns (ListUsersResponse) {}
  rpc ExportUsers(ListUsersRequest) returns (stream User) {}
}