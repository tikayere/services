syntax = "proto3";

package orders;

option go_package = "./proto;orders";

// OrderItem represents an item within an order
message OrderItem {
  string id = 1;
  string product_id = 2;
  int32 quantity = 3;
  double unit_price = 4;
  int64 created_at = 5; // Unix timestamp
  int64 updated_at = 6; // Unix timestamp
  string order_id = 7;
}

// Order represents an order in the system
message Order {
  string id = 1;
  string user_id = 2;
  double total_amount = 3;
  string status = 4; // pending, processing, shipped, delivered, cancelled
  int64 created_at = 5; // Unix timestamp
  int64 updated_at = 6; // Unix timestamp
  repeated OrderItem order_items = 7; // Embedded order items
}

// Request message for creating an order
message CreateOrderRequest {
  string user_id = 1;
  repeated OrderItemRequest order_items = 2;
}

// Request message for order items within CreateOrderRequest
message OrderItemRequest {
  string product_id = 1;
  int32 quantity = 2;
  double unit_price = 3;
}

// Response message for creating an order
message CreateOrderResponse {
  Order order = 1;
}

// Request message for getting an order by ID
message GetOrderRequest {
  string id = 1;
}

// Response message for getting an order
message GetOrderResponse {
  Order order = 1;
}

// Request message for updating an order status
message UpdateOrderStatusRequest {
  string id = 1;
  string status = 2; // pending, processing, shipped, delivered, cancelled
}

// Response message for updating an order status
message UpdateOrderStatusResponse {
  Order order = 1;
}

// Request message for listing orders
message ListOrdersRequest {
  int32 limit = 1;
  int32 offset = 2;
  string user_id = 3; // Optional filter by user_id
}

// Response message for listing orders
message ListOrdersResponse {
  repeated Order orders = 1;
  int32 total = 2;
}

// Request message for searching orders
message SearchOrdersRequest {
  string user_id = 1;
  string status = 2;
  int32 limit = 3;
  int32 offset = 4;
}

// Response message for searching orders
message SearchOrdersResponse {
  repeated Order orders = 1;
  int32 total = 2;
}

// Request message for force deleting an order (Admin operation)
message ForceDeleteOrderRequest {
  string id = 1;
}

// Response message for force deleting an order
message ForceDeleteOrderResponse {
  string id = 1;
  bool success = 2;
}

// Request message for bulk creating orders (Admin operation)
message BulkCreateOrdersRequest {
  repeated CreateOrderRequest orders = 1;
}

// Response message for bulk creating orders
message BulkCreateOrdersResponse {
  repeated Order orders = 1;
  int32 total = 2;
}

// Request message for exporting orders (Admin operation)
message ExportOrdersRequest {
  int32 limit = 1;
  int32 offset = 2;
  string user_id = 3;
  string status = 4;
}

// OrderService defines the RPC methods for general order management
service OrderService {
  // Order CRUD operations
  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {}
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse) {}
  rpc UpdateOrderStatus(UpdateOrderStatusRequest) returns (UpdateOrderStatusResponse) {}
  rpc ListOrders(ListOrdersRequest) returns (ListOrdersResponse) {}
  rpc SearchOrders(SearchOrdersRequest) returns (SearchOrdersResponse) {}
}

// AdminService defines the RPC methods for privileged admin operations
service AdminService {
  rpc ForceDeleteOrder(ForceDeleteOrderRequest) returns (ForceDeleteOrderResponse) {}
  rpc BulkCreateOrders(stream CreateOrderRequest) returns (BulkCreateOrdersResponse) {}
  rpc ExportOrders(ExportOrdersRequest) returns (stream Order) {}
}