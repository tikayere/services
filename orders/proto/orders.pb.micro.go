// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/orders.proto

package orders

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for OrderService service

type OrderService interface {
	// Order CRUD operations
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*CreateOrderResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...client.CallOption) (*GetOrderResponse, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...client.CallOption) (*UpdateOrderStatusResponse, error)
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...client.CallOption) (*ListOrdersResponse, error)
	SearchOrders(ctx context.Context, in *SearchOrdersRequest, opts ...client.CallOption) (*SearchOrdersResponse, error)
}

type orderService struct {
	c    client.Client
	name string
}

func NewOrderService(name string, c client.Client) OrderService {
	return &orderService{
		c:    c,
		name: name,
	}
}

func (c *orderService) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...client.CallOption) (*CreateOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.CreateOrder", in)
	out := new(CreateOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...client.CallOption) (*GetOrderResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.GetOrder", in)
	out := new(GetOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...client.CallOption) (*UpdateOrderStatusResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.UpdateOrderStatus", in)
	out := new(UpdateOrderStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...client.CallOption) (*ListOrdersResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.ListOrders", in)
	out := new(ListOrdersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderService) SearchOrders(ctx context.Context, in *SearchOrdersRequest, opts ...client.CallOption) (*SearchOrdersResponse, error) {
	req := c.c.NewRequest(c.name, "OrderService.SearchOrders", in)
	out := new(SearchOrdersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceHandler interface {
	// Order CRUD operations
	CreateOrder(context.Context, *CreateOrderRequest, *CreateOrderResponse) error
	GetOrder(context.Context, *GetOrderRequest, *GetOrderResponse) error
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest, *UpdateOrderStatusResponse) error
	ListOrders(context.Context, *ListOrdersRequest, *ListOrdersResponse) error
	SearchOrders(context.Context, *SearchOrdersRequest, *SearchOrdersResponse) error
}

func RegisterOrderServiceHandler(s server.Server, hdlr OrderServiceHandler, opts ...server.HandlerOption) error {
	type orderService interface {
		CreateOrder(ctx context.Context, in *CreateOrderRequest, out *CreateOrderResponse) error
		GetOrder(ctx context.Context, in *GetOrderRequest, out *GetOrderResponse) error
		UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, out *UpdateOrderStatusResponse) error
		ListOrders(ctx context.Context, in *ListOrdersRequest, out *ListOrdersResponse) error
		SearchOrders(ctx context.Context, in *SearchOrdersRequest, out *SearchOrdersResponse) error
	}
	type OrderService struct {
		orderService
	}
	h := &orderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderService{h}, opts...))
}

type orderServiceHandler struct {
	OrderServiceHandler
}

func (h *orderServiceHandler) CreateOrder(ctx context.Context, in *CreateOrderRequest, out *CreateOrderResponse) error {
	return h.OrderServiceHandler.CreateOrder(ctx, in, out)
}

func (h *orderServiceHandler) GetOrder(ctx context.Context, in *GetOrderRequest, out *GetOrderResponse) error {
	return h.OrderServiceHandler.GetOrder(ctx, in, out)
}

func (h *orderServiceHandler) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, out *UpdateOrderStatusResponse) error {
	return h.OrderServiceHandler.UpdateOrderStatus(ctx, in, out)
}

func (h *orderServiceHandler) ListOrders(ctx context.Context, in *ListOrdersRequest, out *ListOrdersResponse) error {
	return h.OrderServiceHandler.ListOrders(ctx, in, out)
}

func (h *orderServiceHandler) SearchOrders(ctx context.Context, in *SearchOrdersRequest, out *SearchOrdersResponse) error {
	return h.OrderServiceHandler.SearchOrders(ctx, in, out)
}

// Client API for AdminService service

type AdminService interface {
	ForceDeleteOrder(ctx context.Context, in *ForceDeleteOrderRequest, opts ...client.CallOption) (*ForceDeleteOrderResponse, error)
	BulkCreateOrders(ctx context.Context, opts ...client.CallOption) (AdminService_BulkCreateOrdersService, error)
	ExportOrders(ctx context.Context, in *ExportOrdersRequest, opts ...client.CallOption) (AdminService_ExportOrdersService, error)
}

type adminService struct {
	c    client.Client
	name string
}

func NewAdminService(name string, c client.Client) AdminService {
	return &adminService{
		c:    c,
		name: name,
	}
}

func (c *adminService) ForceDeleteOrder(ctx context.Context, in *ForceDeleteOrderRequest, opts ...client.CallOption) (*ForceDeleteOrderResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.ForceDeleteOrder", in)
	out := new(ForceDeleteOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) BulkCreateOrders(ctx context.Context, opts ...client.CallOption) (AdminService_BulkCreateOrdersService, error) {
	req := c.c.NewRequest(c.name, "AdminService.BulkCreateOrders", &CreateOrderRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &adminServiceBulkCreateOrders{stream}, nil
}

type AdminService_BulkCreateOrdersService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*CreateOrderRequest) error
}

type adminServiceBulkCreateOrders struct {
	stream client.Stream
}

func (x *adminServiceBulkCreateOrders) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *adminServiceBulkCreateOrders) Close() error {
	return x.stream.Close()
}

func (x *adminServiceBulkCreateOrders) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceBulkCreateOrders) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceBulkCreateOrders) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceBulkCreateOrders) Send(m *CreateOrderRequest) error {
	return x.stream.Send(m)
}

func (c *adminService) ExportOrders(ctx context.Context, in *ExportOrdersRequest, opts ...client.CallOption) (AdminService_ExportOrdersService, error) {
	req := c.c.NewRequest(c.name, "AdminService.ExportOrders", &ExportOrdersRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &adminServiceExportOrders{stream}, nil
}

type AdminService_ExportOrdersService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*Order, error)
}

type adminServiceExportOrders struct {
	stream client.Stream
}

func (x *adminServiceExportOrders) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *adminServiceExportOrders) Close() error {
	return x.stream.Close()
}

func (x *adminServiceExportOrders) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceExportOrders) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceExportOrders) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceExportOrders) Recv() (*Order, error) {
	m := new(Order)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AdminService service

type AdminServiceHandler interface {
	ForceDeleteOrder(context.Context, *ForceDeleteOrderRequest, *ForceDeleteOrderResponse) error
	BulkCreateOrders(context.Context, AdminService_BulkCreateOrdersStream) error
	ExportOrders(context.Context, *ExportOrdersRequest, AdminService_ExportOrdersStream) error
}

func RegisterAdminServiceHandler(s server.Server, hdlr AdminServiceHandler, opts ...server.HandlerOption) error {
	type adminService interface {
		ForceDeleteOrder(ctx context.Context, in *ForceDeleteOrderRequest, out *ForceDeleteOrderResponse) error
		BulkCreateOrders(ctx context.Context, stream server.Stream) error
		ExportOrders(ctx context.Context, stream server.Stream) error
	}
	type AdminService struct {
		adminService
	}
	h := &adminServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AdminService{h}, opts...))
}

type adminServiceHandler struct {
	AdminServiceHandler
}

func (h *adminServiceHandler) ForceDeleteOrder(ctx context.Context, in *ForceDeleteOrderRequest, out *ForceDeleteOrderResponse) error {
	return h.AdminServiceHandler.ForceDeleteOrder(ctx, in, out)
}

func (h *adminServiceHandler) BulkCreateOrders(ctx context.Context, stream server.Stream) error {
	return h.AdminServiceHandler.BulkCreateOrders(ctx, &adminServiceBulkCreateOrdersStream{stream})
}

type AdminService_BulkCreateOrdersStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*CreateOrderRequest, error)
}

type adminServiceBulkCreateOrdersStream struct {
	stream server.Stream
}

func (x *adminServiceBulkCreateOrdersStream) Close() error {
	return x.stream.Close()
}

func (x *adminServiceBulkCreateOrdersStream) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceBulkCreateOrdersStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceBulkCreateOrdersStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceBulkCreateOrdersStream) Recv() (*CreateOrderRequest, error) {
	m := new(CreateOrderRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *adminServiceHandler) ExportOrders(ctx context.Context, stream server.Stream) error {
	m := new(ExportOrdersRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.AdminServiceHandler.ExportOrders(ctx, m, &adminServiceExportOrdersStream{stream})
}

type AdminService_ExportOrdersStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Order) error
}

type adminServiceExportOrdersStream struct {
	stream server.Stream
}

func (x *adminServiceExportOrdersStream) Close() error {
	return x.stream.Close()
}

func (x *adminServiceExportOrdersStream) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceExportOrdersStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceExportOrdersStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceExportOrdersStream) Send(m *Order) error {
	return x.stream.Send(m)
}
