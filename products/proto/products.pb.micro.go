// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/products.proto

package products

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductService service

type ProductService interface {
	// Product CRUD operations
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...client.CallOption) (*UpdateProductResponse, error)
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...client.CallOption) (*ListProductsResponse, error)
	SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...client.CallOption) (*SearchProductsResponse, error)
	// Category CRUD operations
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error)
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...client.CallOption) (*GetCategoryResponse, error)
	// Subcategory CRUD operations
	CreateSubcategory(ctx context.Context, in *CreateSubcategoryRequest, opts ...client.CallOption) (*CreateSubcategoryResponse, error)
	GetSubcategory(ctx context.Context, in *GetSubcategoryRequest, opts ...client.CallOption) (*GetSubcategoryResponse, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...client.CallOption) (*CreateProductResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.CreateProduct", in)
	out := new(CreateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetProduct(ctx context.Context, in *GetProductRequest, opts ...client.CallOption) (*GetProductResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.GetProduct", in)
	out := new(GetProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...client.CallOption) (*UpdateProductResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.UpdateProduct", in)
	out := new(UpdateProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...client.CallOption) (*ListProductsResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.ListProducts", in)
	out := new(ListProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) SearchProducts(ctx context.Context, in *SearchProductsRequest, opts ...client.CallOption) (*SearchProductsResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.SearchProducts", in)
	out := new(SearchProductsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...client.CallOption) (*CreateCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.CreateCategory", in)
	out := new(CreateCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...client.CallOption) (*GetCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.GetCategory", in)
	out := new(GetCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) CreateSubcategory(ctx context.Context, in *CreateSubcategoryRequest, opts ...client.CallOption) (*CreateSubcategoryResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.CreateSubcategory", in)
	out := new(CreateSubcategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetSubcategory(ctx context.Context, in *GetSubcategoryRequest, opts ...client.CallOption) (*GetSubcategoryResponse, error) {
	req := c.c.NewRequest(c.name, "ProductService.GetSubcategory", in)
	out := new(GetSubcategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceHandler interface {
	// Product CRUD operations
	CreateProduct(context.Context, *CreateProductRequest, *CreateProductResponse) error
	GetProduct(context.Context, *GetProductRequest, *GetProductResponse) error
	UpdateProduct(context.Context, *UpdateProductRequest, *UpdateProductResponse) error
	ListProducts(context.Context, *ListProductsRequest, *ListProductsResponse) error
	SearchProducts(context.Context, *SearchProductsRequest, *SearchProductsResponse) error
	// Category CRUD operations
	CreateCategory(context.Context, *CreateCategoryRequest, *CreateCategoryResponse) error
	GetCategory(context.Context, *GetCategoryRequest, *GetCategoryResponse) error
	// Subcategory CRUD operations
	CreateSubcategory(context.Context, *CreateSubcategoryRequest, *CreateSubcategoryResponse) error
	GetSubcategory(context.Context, *GetSubcategoryRequest, *GetSubcategoryResponse) error
}

func RegisterProductServiceHandler(s server.Server, hdlr ProductServiceHandler, opts ...server.HandlerOption) error {
	type productService interface {
		CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error
		GetProduct(ctx context.Context, in *GetProductRequest, out *GetProductResponse) error
		UpdateProduct(ctx context.Context, in *UpdateProductRequest, out *UpdateProductResponse) error
		ListProducts(ctx context.Context, in *ListProductsRequest, out *ListProductsResponse) error
		SearchProducts(ctx context.Context, in *SearchProductsRequest, out *SearchProductsResponse) error
		CreateCategory(ctx context.Context, in *CreateCategoryRequest, out *CreateCategoryResponse) error
		GetCategory(ctx context.Context, in *GetCategoryRequest, out *GetCategoryResponse) error
		CreateSubcategory(ctx context.Context, in *CreateSubcategoryRequest, out *CreateSubcategoryResponse) error
		GetSubcategory(ctx context.Context, in *GetSubcategoryRequest, out *GetSubcategoryResponse) error
	}
	type ProductService struct {
		productService
	}
	h := &productServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductService{h}, opts...))
}

type productServiceHandler struct {
	ProductServiceHandler
}

func (h *productServiceHandler) CreateProduct(ctx context.Context, in *CreateProductRequest, out *CreateProductResponse) error {
	return h.ProductServiceHandler.CreateProduct(ctx, in, out)
}

func (h *productServiceHandler) GetProduct(ctx context.Context, in *GetProductRequest, out *GetProductResponse) error {
	return h.ProductServiceHandler.GetProduct(ctx, in, out)
}

func (h *productServiceHandler) UpdateProduct(ctx context.Context, in *UpdateProductRequest, out *UpdateProductResponse) error {
	return h.ProductServiceHandler.UpdateProduct(ctx, in, out)
}

func (h *productServiceHandler) ListProducts(ctx context.Context, in *ListProductsRequest, out *ListProductsResponse) error {
	return h.ProductServiceHandler.ListProducts(ctx, in, out)
}

func (h *productServiceHandler) SearchProducts(ctx context.Context, in *SearchProductsRequest, out *SearchProductsResponse) error {
	return h.ProductServiceHandler.SearchProducts(ctx, in, out)
}

func (h *productServiceHandler) CreateCategory(ctx context.Context, in *CreateCategoryRequest, out *CreateCategoryResponse) error {
	return h.ProductServiceHandler.CreateCategory(ctx, in, out)
}

func (h *productServiceHandler) GetCategory(ctx context.Context, in *GetCategoryRequest, out *GetCategoryResponse) error {
	return h.ProductServiceHandler.GetCategory(ctx, in, out)
}

func (h *productServiceHandler) CreateSubcategory(ctx context.Context, in *CreateSubcategoryRequest, out *CreateSubcategoryResponse) error {
	return h.ProductServiceHandler.CreateSubcategory(ctx, in, out)
}

func (h *productServiceHandler) GetSubcategory(ctx context.Context, in *GetSubcategoryRequest, out *GetSubcategoryResponse) error {
	return h.ProductServiceHandler.GetSubcategory(ctx, in, out)
}

// Client API for AdminService service

type AdminService interface {
	ForceDeleteProduct(ctx context.Context, in *ForceDeleteProductRequest, opts ...client.CallOption) (*ForceDeleteProductResponse, error)
	BulkCreateProducts(ctx context.Context, opts ...client.CallOption) (AdminService_BulkCreateProductsService, error)
	ExportProducts(ctx context.Context, in *ExportProductsRequest, opts ...client.CallOption) (AdminService_ExportProductsService, error)
}

type adminService struct {
	c    client.Client
	name string
}

func NewAdminService(name string, c client.Client) AdminService {
	return &adminService{
		c:    c,
		name: name,
	}
}

func (c *adminService) ForceDeleteProduct(ctx context.Context, in *ForceDeleteProductRequest, opts ...client.CallOption) (*ForceDeleteProductResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.ForceDeleteProduct", in)
	out := new(ForceDeleteProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) BulkCreateProducts(ctx context.Context, opts ...client.CallOption) (AdminService_BulkCreateProductsService, error) {
	req := c.c.NewRequest(c.name, "AdminService.BulkCreateProducts", &CreateProductRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &adminServiceBulkCreateProducts{stream}, nil
}

type AdminService_BulkCreateProductsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*CreateProductRequest) error
}

type adminServiceBulkCreateProducts struct {
	stream client.Stream
}

func (x *adminServiceBulkCreateProducts) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *adminServiceBulkCreateProducts) Close() error {
	return x.stream.Close()
}

func (x *adminServiceBulkCreateProducts) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceBulkCreateProducts) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceBulkCreateProducts) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceBulkCreateProducts) Send(m *CreateProductRequest) error {
	return x.stream.Send(m)
}

func (c *adminService) ExportProducts(ctx context.Context, in *ExportProductsRequest, opts ...client.CallOption) (AdminService_ExportProductsService, error) {
	req := c.c.NewRequest(c.name, "AdminService.ExportProducts", &ExportProductsRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &adminServiceExportProducts{stream}, nil
}

type AdminService_ExportProductsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*Product, error)
}

type adminServiceExportProducts struct {
	stream client.Stream
}

func (x *adminServiceExportProducts) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *adminServiceExportProducts) Close() error {
	return x.stream.Close()
}

func (x *adminServiceExportProducts) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceExportProducts) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceExportProducts) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceExportProducts) Recv() (*Product, error) {
	m := new(Product)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AdminService service

type AdminServiceHandler interface {
	ForceDeleteProduct(context.Context, *ForceDeleteProductRequest, *ForceDeleteProductResponse) error
	BulkCreateProducts(context.Context, AdminService_BulkCreateProductsStream) error
	ExportProducts(context.Context, *ExportProductsRequest, AdminService_ExportProductsStream) error
}

func RegisterAdminServiceHandler(s server.Server, hdlr AdminServiceHandler, opts ...server.HandlerOption) error {
	type adminService interface {
		ForceDeleteProduct(ctx context.Context, in *ForceDeleteProductRequest, out *ForceDeleteProductResponse) error
		BulkCreateProducts(ctx context.Context, stream server.Stream) error
		ExportProducts(ctx context.Context, stream server.Stream) error
	}
	type AdminService struct {
		adminService
	}
	h := &adminServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AdminService{h}, opts...))
}

type adminServiceHandler struct {
	AdminServiceHandler
}

func (h *adminServiceHandler) ForceDeleteProduct(ctx context.Context, in *ForceDeleteProductRequest, out *ForceDeleteProductResponse) error {
	return h.AdminServiceHandler.ForceDeleteProduct(ctx, in, out)
}

func (h *adminServiceHandler) BulkCreateProducts(ctx context.Context, stream server.Stream) error {
	return h.AdminServiceHandler.BulkCreateProducts(ctx, &adminServiceBulkCreateProductsStream{stream})
}

type AdminService_BulkCreateProductsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*CreateProductRequest, error)
}

type adminServiceBulkCreateProductsStream struct {
	stream server.Stream
}

func (x *adminServiceBulkCreateProductsStream) Close() error {
	return x.stream.Close()
}

func (x *adminServiceBulkCreateProductsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceBulkCreateProductsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceBulkCreateProductsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceBulkCreateProductsStream) Recv() (*CreateProductRequest, error) {
	m := new(CreateProductRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *adminServiceHandler) ExportProducts(ctx context.Context, stream server.Stream) error {
	m := new(ExportProductsRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.AdminServiceHandler.ExportProducts(ctx, m, &adminServiceExportProductsStream{stream})
}

type AdminService_ExportProductsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Product) error
}

type adminServiceExportProductsStream struct {
	stream server.Stream
}

func (x *adminServiceExportProductsStream) Close() error {
	return x.stream.Close()
}

func (x *adminServiceExportProductsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *adminServiceExportProductsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *adminServiceExportProductsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *adminServiceExportProductsStream) Send(m *Product) error {
	return x.stream.Send(m)
}
